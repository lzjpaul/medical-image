# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_singa_wrap')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_singa_wrap')
    _singa_wrap = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_singa_wrap', [dirname(__file__)])
        except ImportError:
            import _singa_wrap
            return _singa_wrap
        if fp is not None:
            try:
                _mod = imp.load_module('_singa_wrap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _singa_wrap = swig_import_helper()
    del swig_import_helper
else:
    import _singa_wrap
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

USE_CUDA = _singa_wrap.USE_CUDA
USE_CUDNN = _singa_wrap.USE_CUDNN
USE_PYTHON = _singa_wrap.USE_PYTHON
USE_JAVA = _singa_wrap.USE_JAVA
CUDNN_VERSION = _singa_wrap.CUDNN_VERSION
SINGA_MAJOR_VERSION = _singa_wrap.SINGA_MAJOR_VERSION
SINGA_PATCH_VERSION = _singa_wrap.SINGA_PATCH_VERSION
SINGA_VERSION = _singa_wrap.SINGA_VERSION
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _singa_wrap.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _singa_wrap.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _singa_wrap.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _singa_wrap.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _singa_wrap.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _singa_wrap.SwigPyIterator_equal(self, x)

    def copy(self):
        return _singa_wrap.SwigPyIterator_copy(self)

    def next(self):
        return _singa_wrap.SwigPyIterator_next(self)

    def __next__(self):
        return _singa_wrap.SwigPyIterator___next__(self)

    def previous(self):
        return _singa_wrap.SwigPyIterator_previous(self)

    def advance(self, n):
        return _singa_wrap.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _singa_wrap.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _singa_wrap.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _singa_wrap.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _singa_wrap.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _singa_wrap.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _singa_wrap.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _singa_wrap.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _singa_wrap.SHARED_PTR_DISOWN
class Shape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shape, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _singa_wrap.Shape_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _singa_wrap.Shape___nonzero__(self)

    def __bool__(self):
        return _singa_wrap.Shape___bool__(self)

    def __len__(self):
        return _singa_wrap.Shape___len__(self)

    def __getslice__(self, i, j):
        return _singa_wrap.Shape___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _singa_wrap.Shape___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _singa_wrap.Shape___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _singa_wrap.Shape___delitem__(self, *args)

    def __getitem__(self, *args):
        return _singa_wrap.Shape___getitem__(self, *args)

    def __setitem__(self, *args):
        return _singa_wrap.Shape___setitem__(self, *args)

    def pop(self):
        return _singa_wrap.Shape_pop(self)

    def append(self, x):
        return _singa_wrap.Shape_append(self, x)

    def empty(self):
        return _singa_wrap.Shape_empty(self)

    def size(self):
        return _singa_wrap.Shape_size(self)

    def swap(self, v):
        return _singa_wrap.Shape_swap(self, v)

    def begin(self):
        return _singa_wrap.Shape_begin(self)

    def end(self):
        return _singa_wrap.Shape_end(self)

    def rbegin(self):
        return _singa_wrap.Shape_rbegin(self)

    def rend(self):
        return _singa_wrap.Shape_rend(self)

    def clear(self):
        return _singa_wrap.Shape_clear(self)

    def get_allocator(self):
        return _singa_wrap.Shape_get_allocator(self)

    def pop_back(self):
        return _singa_wrap.Shape_pop_back(self)

    def erase(self, *args):
        return _singa_wrap.Shape_erase(self, *args)

    def __init__(self, *args):
        this = _singa_wrap.new_Shape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _singa_wrap.Shape_push_back(self, x)

    def front(self):
        return _singa_wrap.Shape_front(self)

    def back(self):
        return _singa_wrap.Shape_back(self)

    def assign(self, n, x):
        return _singa_wrap.Shape_assign(self, n, x)

    def resize(self, *args):
        return _singa_wrap.Shape_resize(self, *args)

    def insert(self, *args):
        return _singa_wrap.Shape_insert(self, *args)

    def reserve(self, n):
        return _singa_wrap.Shape_reserve(self, n)

    def capacity(self):
        return _singa_wrap.Shape_capacity(self)
    __swig_destroy__ = _singa_wrap.delete_Shape
    __del__ = lambda self: None
Shape_swigregister = _singa_wrap.Shape_swigregister
Shape_swigregister(Shape)

kFloat32 = _singa_wrap.kFloat32
kFloat16 = _singa_wrap.kFloat16
kInt = _singa_wrap.kInt
kChar = _singa_wrap.kChar
kDouble = _singa_wrap.kDouble

def Product(shape, start=0, len=0):
    return _singa_wrap.Product(shape, start, len)
Product = _singa_wrap.Product

def SizeOf(t):
    return _singa_wrap.SizeOf(t)
SizeOf = _singa_wrap.SizeOf
class Tensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _singa_wrap.new_Tensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def device(self):
        return _singa_wrap.Tensor_device(self)

    def GetFloatValue(self, value):
        return _singa_wrap.Tensor_GetFloatValue(self, value)

    def GetIntValue(self, value):
        return _singa_wrap.Tensor_GetIntValue(self, value)

    def SetFloatValue(self, x):
        return _singa_wrap.Tensor_SetFloatValue(self, x)

    def data_type(self):
        return _singa_wrap.Tensor_data_type(self)

    def shape(self, *args):
        return _singa_wrap.Tensor_shape(self, *args)

    def nDim(self):
        return _singa_wrap.Tensor_nDim(self)

    def transpose(self):
        return _singa_wrap.Tensor_transpose(self)

    def Size(self):
        return _singa_wrap.Tensor_Size(self)

    def MemSize(self):
        return _singa_wrap.Tensor_MemSize(self)

    def Reshape(self, shape):
        return _singa_wrap.Tensor_Reshape(self, shape)

    def ResetLike(self, t):
        return _singa_wrap.Tensor_ResetLike(self, t)

    def AsType(self, type):
        return _singa_wrap.Tensor_AsType(self, type)

    def ToDevice(self, dev):
        return _singa_wrap.Tensor_ToDevice(self, dev)

    def ToHost(self):
        return _singa_wrap.Tensor_ToHost(self)

    def L2(self):
        return _singa_wrap.Tensor_L2(self)

    def L1(self):
        return _singa_wrap.Tensor_L1(self)

    def CopyFloatDataFromHostPtr(self, src, offset=0):
        return _singa_wrap.Tensor_CopyFloatDataFromHostPtr(self, src, offset)

    def CopyIntDataFromHostPtr(self, src, offset=0):
        return _singa_wrap.Tensor_CopyIntDataFromHostPtr(self, src, offset)

    def CopyData(self, other):
        return _singa_wrap.Tensor_CopyData(self, other)

    def Clone(self):
        return _singa_wrap.Tensor_Clone(self)

    def T(self):
        return _singa_wrap.Tensor_T(self)

    def __iadd__(self, *args):
        return _singa_wrap.Tensor___iadd__(self, *args)

    def __isub__(self, *args):
        return _singa_wrap.Tensor___isub__(self, *args)

    def __imul__(self, *args):
        return _singa_wrap.Tensor___imul__(self, *args)

    def __idiv__(self, *args):
        return _singa_wrap.Tensor___idiv__(self, *args)
    __swig_destroy__ = _singa_wrap.delete_Tensor
    __del__ = lambda self: None
Tensor_swigregister = _singa_wrap.Tensor_swigregister
Tensor_swigregister(Tensor)


def CopyDataToFrom(dst, src, num, src_offset=0, dst_offset=0):
    return _singa_wrap.CopyDataToFrom(dst, src, num, src_offset, dst_offset)
CopyDataToFrom = _singa_wrap.CopyDataToFrom

def Reshape(arg1, s):
    return _singa_wrap.Reshape(arg1, s)
Reshape = _singa_wrap.Reshape

def Abs(t):
    return _singa_wrap.Abs(t)
Abs = _singa_wrap.Abs

def Exp(t):
    return _singa_wrap.Exp(t)
Exp = _singa_wrap.Exp

def Log(t):
    return _singa_wrap.Log(t)
Log = _singa_wrap.Log

def ReLU(t):
    return _singa_wrap.ReLU(t)
ReLU = _singa_wrap.ReLU

def Sigmoid(t):
    return _singa_wrap.Sigmoid(t)
Sigmoid = _singa_wrap.Sigmoid

def Sign(t):
    return _singa_wrap.Sign(t)
Sign = _singa_wrap.Sign

def Sqrt(t):
    return _singa_wrap.Sqrt(t)
Sqrt = _singa_wrap.Sqrt

def Square(t):
    return _singa_wrap.Square(t)
Square = _singa_wrap.Square

def Tanh(t):
    return _singa_wrap.Tanh(t)
Tanh = _singa_wrap.Tanh

def Sum(t, axis):
    return _singa_wrap.Sum(t, axis)
Sum = _singa_wrap.Sum

def SumAsFloat(t):
    return _singa_wrap.SumAsFloat(t)
SumAsFloat = _singa_wrap.SumAsFloat

def Average(t, axis):
    return _singa_wrap.Average(t, axis)
Average = _singa_wrap.Average

def Pow(base, exp):
    return _singa_wrap.Pow(base, exp)
Pow = _singa_wrap.Pow

def PowWithRet(base, exp, out):
    return _singa_wrap.PowWithRet(base, exp, out)
PowWithRet = _singa_wrap.PowWithRet

def PowFloat(arg1, x):
    return _singa_wrap.PowFloat(arg1, x)
PowFloat = _singa_wrap.PowFloat

def PowFloatWithRet(*args):
    return _singa_wrap.PowFloatWithRet(*args)
PowFloatWithRet = _singa_wrap.PowFloatWithRet

def __lt__(lhs, rhs):
    return _singa_wrap.__lt__(lhs, rhs)
__lt__ = _singa_wrap.__lt__

def __le__(lhs, rhs):
    return _singa_wrap.__le__(lhs, rhs)
__le__ = _singa_wrap.__le__

def __gt__(lhs, rhs):
    return _singa_wrap.__gt__(lhs, rhs)
__gt__ = _singa_wrap.__gt__

def __ge__(lhs, rhs):
    return _singa_wrap.__ge__(lhs, rhs)
__ge__ = _singa_wrap.__ge__

def LTFloat(t, x):
    return _singa_wrap.LTFloat(t, x)
LTFloat = _singa_wrap.LTFloat

def LEFloat(t, x):
    return _singa_wrap.LEFloat(t, x)
LEFloat = _singa_wrap.LEFloat

def GTFloat(t, x):
    return _singa_wrap.GTFloat(t, x)
GTFloat = _singa_wrap.GTFloat

def GEFloat(t, x):
    return _singa_wrap.GEFloat(t, x)
GEFloat = _singa_wrap.GEFloat

def __add__(lhs, rhs):
    return _singa_wrap.__add__(lhs, rhs)
__add__ = _singa_wrap.__add__

def __sub__(lhs, rhs):
    return _singa_wrap.__sub__(lhs, rhs)
__sub__ = _singa_wrap.__sub__

def __mul__(lhs, rhs):
    return _singa_wrap.__mul__(lhs, rhs)
__mul__ = _singa_wrap.__mul__

def __div__(lhs, rhs):
    return _singa_wrap.__div__(lhs, rhs)
__div__ = _singa_wrap.__div__

def Add(lhs, rhs, ret):
    return _singa_wrap.Add(lhs, rhs, ret)
Add = _singa_wrap.Add

def Sub(lhs, rhs, ret):
    return _singa_wrap.Sub(lhs, rhs, ret)
Sub = _singa_wrap.Sub

def EltwiseMult(lhs, rhs, ret):
    return _singa_wrap.EltwiseMult(lhs, rhs, ret)
EltwiseMult = _singa_wrap.EltwiseMult

def Div(lhs, rhs, ret):
    return _singa_wrap.Div(lhs, rhs, ret)
Div = _singa_wrap.Div

def AddFloat(t, x):
    return _singa_wrap.AddFloat(t, x)
AddFloat = _singa_wrap.AddFloat

def SubFloat(t, x):
    return _singa_wrap.SubFloat(t, x)
SubFloat = _singa_wrap.SubFloat

def MultFloat(t, x):
    return _singa_wrap.MultFloat(t, x)
MultFloat = _singa_wrap.MultFloat

def DivFloat(t, x):
    return _singa_wrap.DivFloat(t, x)
DivFloat = _singa_wrap.DivFloat

def AddFloatWithRet(t, x, ret):
    return _singa_wrap.AddFloatWithRet(t, x, ret)
AddFloatWithRet = _singa_wrap.AddFloatWithRet

def SubFloatWithRet(t, x, ret):
    return _singa_wrap.SubFloatWithRet(t, x, ret)
SubFloatWithRet = _singa_wrap.SubFloatWithRet

def EltwiseMultFloatWithRet(t, x, ret):
    return _singa_wrap.EltwiseMultFloatWithRet(t, x, ret)
EltwiseMultFloatWithRet = _singa_wrap.EltwiseMultFloatWithRet

def DivFloatWithRet(t, x, ret):
    return _singa_wrap.DivFloatWithRet(t, x, ret)
DivFloatWithRet = _singa_wrap.DivFloatWithRet

def Bernoulli(p, out):
    return _singa_wrap.Bernoulli(p, out)
Bernoulli = _singa_wrap.Bernoulli

def Gaussian(mean, std, out):
    return _singa_wrap.Gaussian(mean, std, out)
Gaussian = _singa_wrap.Gaussian

def Uniform(low, high, out):
    return _singa_wrap.Uniform(low, high, out)
Uniform = _singa_wrap.Uniform

def Axpy(alpha, arg2, out):
    return _singa_wrap.Axpy(alpha, arg2, out)
Axpy = _singa_wrap.Axpy

def Mult(A, B):
    return _singa_wrap.Mult(A, B)
Mult = _singa_wrap.Mult

def MultWithRet(A, B, C):
    return _singa_wrap.MultWithRet(A, B, C)
MultWithRet = _singa_wrap.MultWithRet

def MultWithScale(alpha, A, B, beta, C):
    return _singa_wrap.MultWithScale(alpha, A, B, beta, C)
MultWithScale = _singa_wrap.MultWithScale

def AddColumn(v, M):
    return _singa_wrap.AddColumn(v, M)
AddColumn = _singa_wrap.AddColumn

def AddColumnWithScale(alpha, beta, v, M):
    return _singa_wrap.AddColumnWithScale(alpha, beta, v, M)
AddColumnWithScale = _singa_wrap.AddColumnWithScale

def AddRow(v, M):
    return _singa_wrap.AddRow(v, M)
AddRow = _singa_wrap.AddRow

def AddRowWithScale(alpha, beta, v, M):
    return _singa_wrap.AddRowWithScale(alpha, beta, v, M)
AddRowWithScale = _singa_wrap.AddRowWithScale

def DivColumn(v, M):
    return _singa_wrap.DivColumn(v, M)
DivColumn = _singa_wrap.DivColumn

def DivRow(v, M):
    return _singa_wrap.DivRow(v, M)
DivRow = _singa_wrap.DivRow

def MultColumn(v, M):
    return _singa_wrap.MultColumn(v, M)
MultColumn = _singa_wrap.MultColumn

def MultRow(v, M):
    return _singa_wrap.MultRow(v, M)
MultRow = _singa_wrap.MultRow

def SubColumn(v, M):
    return _singa_wrap.SubColumn(v, M)
SubColumn = _singa_wrap.SubColumn

def SubRow(v, M):
    return _singa_wrap.SubRow(v, M)
SubRow = _singa_wrap.SubRow

def SumColumns(M, v):
    return _singa_wrap.SumColumns(M, v)
SumColumns = _singa_wrap.SumColumns

def SumRows(M, v):
    return _singa_wrap.SumRows(M, v)
SumRows = _singa_wrap.SumRows

def SoftMax(*args):
    return _singa_wrap.SoftMax(*args)
SoftMax = _singa_wrap.SoftMax
class PairSizeT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairSizeT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairSizeT, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _singa_wrap.new_PairSizeT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _singa_wrap.PairSizeT_first_set
    __swig_getmethods__["first"] = _singa_wrap.PairSizeT_first_get
    if _newclass:
        first = _swig_property(_singa_wrap.PairSizeT_first_get, _singa_wrap.PairSizeT_first_set)
    __swig_setmethods__["second"] = _singa_wrap.PairSizeT_second_set
    __swig_getmethods__["second"] = _singa_wrap.PairSizeT_second_get
    if _newclass:
        second = _swig_property(_singa_wrap.PairSizeT_second_get, _singa_wrap.PairSizeT_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _singa_wrap.delete_PairSizeT
    __del__ = lambda self: None
PairSizeT_swigregister = _singa_wrap.PairSizeT_swigregister
PairSizeT_swigregister(PairSizeT)

class VecPairSizeT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecPairSizeT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecPairSizeT, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _singa_wrap.VecPairSizeT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _singa_wrap.VecPairSizeT___nonzero__(self)

    def __bool__(self):
        return _singa_wrap.VecPairSizeT___bool__(self)

    def __len__(self):
        return _singa_wrap.VecPairSizeT___len__(self)

    def __getslice__(self, i, j):
        return _singa_wrap.VecPairSizeT___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _singa_wrap.VecPairSizeT___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _singa_wrap.VecPairSizeT___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _singa_wrap.VecPairSizeT___delitem__(self, *args)

    def __getitem__(self, *args):
        return _singa_wrap.VecPairSizeT___getitem__(self, *args)

    def __setitem__(self, *args):
        return _singa_wrap.VecPairSizeT___setitem__(self, *args)

    def pop(self):
        return _singa_wrap.VecPairSizeT_pop(self)

    def append(self, x):
        return _singa_wrap.VecPairSizeT_append(self, x)

    def empty(self):
        return _singa_wrap.VecPairSizeT_empty(self)

    def size(self):
        return _singa_wrap.VecPairSizeT_size(self)

    def swap(self, v):
        return _singa_wrap.VecPairSizeT_swap(self, v)

    def begin(self):
        return _singa_wrap.VecPairSizeT_begin(self)

    def end(self):
        return _singa_wrap.VecPairSizeT_end(self)

    def rbegin(self):
        return _singa_wrap.VecPairSizeT_rbegin(self)

    def rend(self):
        return _singa_wrap.VecPairSizeT_rend(self)

    def clear(self):
        return _singa_wrap.VecPairSizeT_clear(self)

    def get_allocator(self):
        return _singa_wrap.VecPairSizeT_get_allocator(self)

    def pop_back(self):
        return _singa_wrap.VecPairSizeT_pop_back(self)

    def erase(self, *args):
        return _singa_wrap.VecPairSizeT_erase(self, *args)

    def __init__(self, *args):
        this = _singa_wrap.new_VecPairSizeT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _singa_wrap.VecPairSizeT_push_back(self, x)

    def front(self):
        return _singa_wrap.VecPairSizeT_front(self)

    def back(self):
        return _singa_wrap.VecPairSizeT_back(self)

    def assign(self, n, x):
        return _singa_wrap.VecPairSizeT_assign(self, n, x)

    def resize(self, *args):
        return _singa_wrap.VecPairSizeT_resize(self, *args)

    def insert(self, *args):
        return _singa_wrap.VecPairSizeT_insert(self, *args)

    def reserve(self, n):
        return _singa_wrap.VecPairSizeT_reserve(self, n)

    def capacity(self):
        return _singa_wrap.VecPairSizeT_capacity(self)
    __swig_destroy__ = _singa_wrap.delete_VecPairSizeT
    __del__ = lambda self: None
VecPairSizeT_swigregister = _singa_wrap.VecPairSizeT_swigregister
VecPairSizeT_swigregister(VecPairSizeT)

class VecSharedPtrDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecSharedPtrDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecSharedPtrDevice, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _singa_wrap.VecSharedPtrDevice_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _singa_wrap.VecSharedPtrDevice___nonzero__(self)

    def __bool__(self):
        return _singa_wrap.VecSharedPtrDevice___bool__(self)

    def __len__(self):
        return _singa_wrap.VecSharedPtrDevice___len__(self)

    def __getslice__(self, i, j):
        return _singa_wrap.VecSharedPtrDevice___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _singa_wrap.VecSharedPtrDevice___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _singa_wrap.VecSharedPtrDevice___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _singa_wrap.VecSharedPtrDevice___delitem__(self, *args)

    def __getitem__(self, *args):
        return _singa_wrap.VecSharedPtrDevice___getitem__(self, *args)

    def __setitem__(self, *args):
        return _singa_wrap.VecSharedPtrDevice___setitem__(self, *args)

    def pop(self):
        return _singa_wrap.VecSharedPtrDevice_pop(self)

    def append(self, x):
        return _singa_wrap.VecSharedPtrDevice_append(self, x)

    def empty(self):
        return _singa_wrap.VecSharedPtrDevice_empty(self)

    def size(self):
        return _singa_wrap.VecSharedPtrDevice_size(self)

    def swap(self, v):
        return _singa_wrap.VecSharedPtrDevice_swap(self, v)

    def begin(self):
        return _singa_wrap.VecSharedPtrDevice_begin(self)

    def end(self):
        return _singa_wrap.VecSharedPtrDevice_end(self)

    def rbegin(self):
        return _singa_wrap.VecSharedPtrDevice_rbegin(self)

    def rend(self):
        return _singa_wrap.VecSharedPtrDevice_rend(self)

    def clear(self):
        return _singa_wrap.VecSharedPtrDevice_clear(self)

    def get_allocator(self):
        return _singa_wrap.VecSharedPtrDevice_get_allocator(self)

    def pop_back(self):
        return _singa_wrap.VecSharedPtrDevice_pop_back(self)

    def erase(self, *args):
        return _singa_wrap.VecSharedPtrDevice_erase(self, *args)

    def __init__(self, *args):
        this = _singa_wrap.new_VecSharedPtrDevice(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _singa_wrap.VecSharedPtrDevice_push_back(self, x)

    def front(self):
        return _singa_wrap.VecSharedPtrDevice_front(self)

    def back(self):
        return _singa_wrap.VecSharedPtrDevice_back(self)

    def assign(self, n, x):
        return _singa_wrap.VecSharedPtrDevice_assign(self, n, x)

    def resize(self, *args):
        return _singa_wrap.VecSharedPtrDevice_resize(self, *args)

    def insert(self, *args):
        return _singa_wrap.VecSharedPtrDevice_insert(self, *args)

    def reserve(self, n):
        return _singa_wrap.VecSharedPtrDevice_reserve(self, n)

    def capacity(self):
        return _singa_wrap.VecSharedPtrDevice_capacity(self)
    __swig_destroy__ = _singa_wrap.delete_VecSharedPtrDevice
    __del__ = lambda self: None
VecSharedPtrDevice_swigregister = _singa_wrap.VecSharedPtrDevice_swigregister
VecSharedPtrDevice_swigregister(VecSharedPtrDevice)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _singa_wrap.VecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _singa_wrap.VecInt___nonzero__(self)

    def __bool__(self):
        return _singa_wrap.VecInt___bool__(self)

    def __len__(self):
        return _singa_wrap.VecInt___len__(self)

    def __getslice__(self, i, j):
        return _singa_wrap.VecInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _singa_wrap.VecInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _singa_wrap.VecInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _singa_wrap.VecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _singa_wrap.VecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _singa_wrap.VecInt___setitem__(self, *args)

    def pop(self):
        return _singa_wrap.VecInt_pop(self)

    def append(self, x):
        return _singa_wrap.VecInt_append(self, x)

    def empty(self):
        return _singa_wrap.VecInt_empty(self)

    def size(self):
        return _singa_wrap.VecInt_size(self)

    def swap(self, v):
        return _singa_wrap.VecInt_swap(self, v)

    def begin(self):
        return _singa_wrap.VecInt_begin(self)

    def end(self):
        return _singa_wrap.VecInt_end(self)

    def rbegin(self):
        return _singa_wrap.VecInt_rbegin(self)

    def rend(self):
        return _singa_wrap.VecInt_rend(self)

    def clear(self):
        return _singa_wrap.VecInt_clear(self)

    def get_allocator(self):
        return _singa_wrap.VecInt_get_allocator(self)

    def pop_back(self):
        return _singa_wrap.VecInt_pop_back(self)

    def erase(self, *args):
        return _singa_wrap.VecInt_erase(self, *args)

    def __init__(self, *args):
        this = _singa_wrap.new_VecInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _singa_wrap.VecInt_push_back(self, x)

    def front(self):
        return _singa_wrap.VecInt_front(self)

    def back(self):
        return _singa_wrap.VecInt_back(self)

    def assign(self, n, x):
        return _singa_wrap.VecInt_assign(self, n, x)

    def resize(self, *args):
        return _singa_wrap.VecInt_resize(self, *args)

    def insert(self, *args):
        return _singa_wrap.VecInt_insert(self, *args)

    def reserve(self, n):
        return _singa_wrap.VecInt_reserve(self, n)

    def capacity(self):
        return _singa_wrap.VecInt_capacity(self)
    __swig_destroy__ = _singa_wrap.delete_VecInt
    __del__ = lambda self: None
VecInt_swigregister = _singa_wrap.VecInt_swigregister
VecInt_swigregister(VecInt)

class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetRandSeed(self, seed):
        return _singa_wrap.Device_SetRandSeed(self, seed)

    def host(self):
        return _singa_wrap.Device_host(self)

    def id(self):
        return _singa_wrap.Device_id(self)
    __swig_destroy__ = _singa_wrap.delete_Device
    __del__ = lambda self: None
Device_swigregister = _singa_wrap.Device_swigregister
Device_swigregister(Device)

class Platform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Platform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Platform, name)
    __repr__ = _swig_repr
    if _newclass:
        GetNumGPUs = staticmethod(_singa_wrap.Platform_GetNumGPUs)
    else:
        GetNumGPUs = _singa_wrap.Platform_GetNumGPUs
    if _newclass:
        GetGPUIDs = staticmethod(_singa_wrap.Platform_GetGPUIDs)
    else:
        GetGPUIDs = _singa_wrap.Platform_GetGPUIDs
    if _newclass:
        GetGPUMemSize = staticmethod(_singa_wrap.Platform_GetGPUMemSize)
    else:
        GetGPUMemSize = _singa_wrap.Platform_GetGPUMemSize
    if _newclass:
        DeviceQuery = staticmethod(_singa_wrap.Platform_DeviceQuery)
    else:
        DeviceQuery = _singa_wrap.Platform_DeviceQuery
    if _newclass:
        CreateCudaGPUs = staticmethod(_singa_wrap.Platform_CreateCudaGPUs)
    else:
        CreateCudaGPUs = _singa_wrap.Platform_CreateCudaGPUs
    if _newclass:
        CreateCudaGPUsOn = staticmethod(_singa_wrap.Platform_CreateCudaGPUsOn)
    else:
        CreateCudaGPUsOn = _singa_wrap.Platform_CreateCudaGPUsOn
    if _newclass:
        GetDefaultDevice = staticmethod(_singa_wrap.Platform_GetDefaultDevice)
    else:
        GetDefaultDevice = _singa_wrap.Platform_GetDefaultDevice

    def __init__(self):
        this = _singa_wrap.new_Platform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _singa_wrap.delete_Platform
    __del__ = lambda self: None
Platform_swigregister = _singa_wrap.Platform_swigregister
Platform_swigregister(Platform)

def Platform_GetNumGPUs():
    return _singa_wrap.Platform_GetNumGPUs()
Platform_GetNumGPUs = _singa_wrap.Platform_GetNumGPUs

def Platform_GetGPUIDs():
    return _singa_wrap.Platform_GetGPUIDs()
Platform_GetGPUIDs = _singa_wrap.Platform_GetGPUIDs

def Platform_GetGPUMemSize(*args):
    return _singa_wrap.Platform_GetGPUMemSize(*args)
Platform_GetGPUMemSize = _singa_wrap.Platform_GetGPUMemSize

def Platform_DeviceQuery(id, verbose=False):
    return _singa_wrap.Platform_DeviceQuery(id, verbose)
Platform_DeviceQuery = _singa_wrap.Platform_DeviceQuery

def Platform_CreateCudaGPUs(num_devices, init_size=0):
    return _singa_wrap.Platform_CreateCudaGPUs(num_devices, init_size)
Platform_CreateCudaGPUs = _singa_wrap.Platform_CreateCudaGPUs

def Platform_CreateCudaGPUsOn(devices, init_size=0):
    return _singa_wrap.Platform_CreateCudaGPUsOn(devices, init_size)
Platform_CreateCudaGPUsOn = _singa_wrap.Platform_CreateCudaGPUsOn

def Platform_GetDefaultDevice():
    return _singa_wrap.Platform_GetDefaultDevice()
Platform_GetDefaultDevice = _singa_wrap.Platform_GetDefaultDevice

class VecStr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecStr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _singa_wrap.VecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _singa_wrap.VecStr___nonzero__(self)

    def __bool__(self):
        return _singa_wrap.VecStr___bool__(self)

    def __len__(self):
        return _singa_wrap.VecStr___len__(self)

    def __getslice__(self, i, j):
        return _singa_wrap.VecStr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _singa_wrap.VecStr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _singa_wrap.VecStr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _singa_wrap.VecStr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _singa_wrap.VecStr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _singa_wrap.VecStr___setitem__(self, *args)

    def pop(self):
        return _singa_wrap.VecStr_pop(self)

    def append(self, x):
        return _singa_wrap.VecStr_append(self, x)

    def empty(self):
        return _singa_wrap.VecStr_empty(self)

    def size(self):
        return _singa_wrap.VecStr_size(self)

    def swap(self, v):
        return _singa_wrap.VecStr_swap(self, v)

    def begin(self):
        return _singa_wrap.VecStr_begin(self)

    def end(self):
        return _singa_wrap.VecStr_end(self)

    def rbegin(self):
        return _singa_wrap.VecStr_rbegin(self)

    def rend(self):
        return _singa_wrap.VecStr_rend(self)

    def clear(self):
        return _singa_wrap.VecStr_clear(self)

    def get_allocator(self):
        return _singa_wrap.VecStr_get_allocator(self)

    def pop_back(self):
        return _singa_wrap.VecStr_pop_back(self)

    def erase(self, *args):
        return _singa_wrap.VecStr_erase(self, *args)

    def __init__(self, *args):
        this = _singa_wrap.new_VecStr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _singa_wrap.VecStr_push_back(self, x)

    def front(self):
        return _singa_wrap.VecStr_front(self)

    def back(self):
        return _singa_wrap.VecStr_back(self)

    def assign(self, n, x):
        return _singa_wrap.VecStr_assign(self, n, x)

    def resize(self, *args):
        return _singa_wrap.VecStr_resize(self, *args)

    def insert(self, *args):
        return _singa_wrap.VecStr_insert(self, *args)

    def reserve(self, n):
        return _singa_wrap.VecStr_reserve(self, n)

    def capacity(self):
        return _singa_wrap.VecStr_capacity(self)
    __swig_destroy__ = _singa_wrap.delete_VecStr
    __del__ = lambda self: None
VecStr_swigregister = _singa_wrap.VecStr_swigregister
VecStr_swigregister(VecStr)

class VecParamSpec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecParamSpec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecParamSpec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _singa_wrap.VecParamSpec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _singa_wrap.VecParamSpec___nonzero__(self)

    def __bool__(self):
        return _singa_wrap.VecParamSpec___bool__(self)

    def __len__(self):
        return _singa_wrap.VecParamSpec___len__(self)

    def __getslice__(self, i, j):
        return _singa_wrap.VecParamSpec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _singa_wrap.VecParamSpec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _singa_wrap.VecParamSpec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _singa_wrap.VecParamSpec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _singa_wrap.VecParamSpec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _singa_wrap.VecParamSpec___setitem__(self, *args)

    def pop(self):
        return _singa_wrap.VecParamSpec_pop(self)

    def append(self, x):
        return _singa_wrap.VecParamSpec_append(self, x)

    def empty(self):
        return _singa_wrap.VecParamSpec_empty(self)

    def size(self):
        return _singa_wrap.VecParamSpec_size(self)

    def swap(self, v):
        return _singa_wrap.VecParamSpec_swap(self, v)

    def begin(self):
        return _singa_wrap.VecParamSpec_begin(self)

    def end(self):
        return _singa_wrap.VecParamSpec_end(self)

    def rbegin(self):
        return _singa_wrap.VecParamSpec_rbegin(self)

    def rend(self):
        return _singa_wrap.VecParamSpec_rend(self)

    def clear(self):
        return _singa_wrap.VecParamSpec_clear(self)

    def get_allocator(self):
        return _singa_wrap.VecParamSpec_get_allocator(self)

    def pop_back(self):
        return _singa_wrap.VecParamSpec_pop_back(self)

    def erase(self, *args):
        return _singa_wrap.VecParamSpec_erase(self, *args)

    def __init__(self, *args):
        this = _singa_wrap.new_VecParamSpec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _singa_wrap.VecParamSpec_push_back(self, x)

    def front(self):
        return _singa_wrap.VecParamSpec_front(self)

    def back(self):
        return _singa_wrap.VecParamSpec_back(self)

    def assign(self, n, x):
        return _singa_wrap.VecParamSpec_assign(self, n, x)

    def resize(self, *args):
        return _singa_wrap.VecParamSpec_resize(self, *args)

    def insert(self, *args):
        return _singa_wrap.VecParamSpec_insert(self, *args)

    def reserve(self, n):
        return _singa_wrap.VecParamSpec_reserve(self, n)

    def capacity(self):
        return _singa_wrap.VecParamSpec_capacity(self)
    __swig_destroy__ = _singa_wrap.delete_VecParamSpec
    __del__ = lambda self: None
VecParamSpec_swigregister = _singa_wrap.VecParamSpec_swigregister
VecParamSpec_swigregister(VecParamSpec)

class VecTensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecTensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecTensor, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _singa_wrap.VecTensor_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _singa_wrap.VecTensor___nonzero__(self)

    def __bool__(self):
        return _singa_wrap.VecTensor___bool__(self)

    def __len__(self):
        return _singa_wrap.VecTensor___len__(self)

    def __getslice__(self, i, j):
        return _singa_wrap.VecTensor___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _singa_wrap.VecTensor___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _singa_wrap.VecTensor___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _singa_wrap.VecTensor___delitem__(self, *args)

    def __getitem__(self, *args):
        return _singa_wrap.VecTensor___getitem__(self, *args)

    def __setitem__(self, *args):
        return _singa_wrap.VecTensor___setitem__(self, *args)

    def pop(self):
        return _singa_wrap.VecTensor_pop(self)

    def append(self, x):
        return _singa_wrap.VecTensor_append(self, x)

    def empty(self):
        return _singa_wrap.VecTensor_empty(self)

    def size(self):
        return _singa_wrap.VecTensor_size(self)

    def swap(self, v):
        return _singa_wrap.VecTensor_swap(self, v)

    def begin(self):
        return _singa_wrap.VecTensor_begin(self)

    def end(self):
        return _singa_wrap.VecTensor_end(self)

    def rbegin(self):
        return _singa_wrap.VecTensor_rbegin(self)

    def rend(self):
        return _singa_wrap.VecTensor_rend(self)

    def clear(self):
        return _singa_wrap.VecTensor_clear(self)

    def get_allocator(self):
        return _singa_wrap.VecTensor_get_allocator(self)

    def pop_back(self):
        return _singa_wrap.VecTensor_pop_back(self)

    def erase(self, *args):
        return _singa_wrap.VecTensor_erase(self, *args)

    def __init__(self, *args):
        this = _singa_wrap.new_VecTensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _singa_wrap.VecTensor_push_back(self, x)

    def front(self):
        return _singa_wrap.VecTensor_front(self)

    def back(self):
        return _singa_wrap.VecTensor_back(self)

    def assign(self, n, x):
        return _singa_wrap.VecTensor_assign(self, n, x)

    def resize(self, *args):
        return _singa_wrap.VecTensor_resize(self, *args)

    def insert(self, *args):
        return _singa_wrap.VecTensor_insert(self, *args)

    def reserve(self, n):
        return _singa_wrap.VecTensor_reserve(self, n)

    def capacity(self):
        return _singa_wrap.VecTensor_capacity(self)
    __swig_destroy__ = _singa_wrap.delete_VecTensor
    __del__ = lambda self: None
VecTensor_swigregister = _singa_wrap.VecTensor_swigregister
VecTensor_swigregister(VecTensor)

class VecVecSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecSize, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _singa_wrap.VecVecSize_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _singa_wrap.VecVecSize___nonzero__(self)

    def __bool__(self):
        return _singa_wrap.VecVecSize___bool__(self)

    def __len__(self):
        return _singa_wrap.VecVecSize___len__(self)

    def __getslice__(self, i, j):
        return _singa_wrap.VecVecSize___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _singa_wrap.VecVecSize___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _singa_wrap.VecVecSize___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _singa_wrap.VecVecSize___delitem__(self, *args)

    def __getitem__(self, *args):
        return _singa_wrap.VecVecSize___getitem__(self, *args)

    def __setitem__(self, *args):
        return _singa_wrap.VecVecSize___setitem__(self, *args)

    def pop(self):
        return _singa_wrap.VecVecSize_pop(self)

    def append(self, x):
        return _singa_wrap.VecVecSize_append(self, x)

    def empty(self):
        return _singa_wrap.VecVecSize_empty(self)

    def size(self):
        return _singa_wrap.VecVecSize_size(self)

    def swap(self, v):
        return _singa_wrap.VecVecSize_swap(self, v)

    def begin(self):
        return _singa_wrap.VecVecSize_begin(self)

    def end(self):
        return _singa_wrap.VecVecSize_end(self)

    def rbegin(self):
        return _singa_wrap.VecVecSize_rbegin(self)

    def rend(self):
        return _singa_wrap.VecVecSize_rend(self)

    def clear(self):
        return _singa_wrap.VecVecSize_clear(self)

    def get_allocator(self):
        return _singa_wrap.VecVecSize_get_allocator(self)

    def pop_back(self):
        return _singa_wrap.VecVecSize_pop_back(self)

    def erase(self, *args):
        return _singa_wrap.VecVecSize_erase(self, *args)

    def __init__(self, *args):
        this = _singa_wrap.new_VecVecSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _singa_wrap.VecVecSize_push_back(self, x)

    def front(self):
        return _singa_wrap.VecVecSize_front(self)

    def back(self):
        return _singa_wrap.VecVecSize_back(self)

    def assign(self, n, x):
        return _singa_wrap.VecVecSize_assign(self, n, x)

    def resize(self, *args):
        return _singa_wrap.VecVecSize_resize(self, *args)

    def insert(self, *args):
        return _singa_wrap.VecVecSize_insert(self, *args)

    def reserve(self, n):
        return _singa_wrap.VecVecSize_reserve(self, n)

    def capacity(self):
        return _singa_wrap.VecVecSize_capacity(self)
    __swig_destroy__ = _singa_wrap.delete_VecVecSize
    __del__ = lambda self: None
VecVecSize_swigregister = _singa_wrap.VecVecSize_swigregister
VecVecSize_swigregister(VecVecSize)

class PairTensorVecTensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairTensorVecTensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairTensorVecTensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _singa_wrap.new_PairTensorVecTensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _singa_wrap.PairTensorVecTensor_first_set
    __swig_getmethods__["first"] = _singa_wrap.PairTensorVecTensor_first_get
    if _newclass:
        first = _swig_property(_singa_wrap.PairTensorVecTensor_first_get, _singa_wrap.PairTensorVecTensor_first_set)
    __swig_setmethods__["second"] = _singa_wrap.PairTensorVecTensor_second_set
    __swig_getmethods__["second"] = _singa_wrap.PairTensorVecTensor_second_get
    if _newclass:
        second = _swig_property(_singa_wrap.PairTensorVecTensor_second_get, _singa_wrap.PairTensorVecTensor_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _singa_wrap.delete_PairTensorVecTensor
    __del__ = lambda self: None
PairTensorVecTensor_swigregister = _singa_wrap.PairTensorVecTensor_swigregister
PairTensorVecTensor_swigregister(PairTensorVecTensor)

class PairVecTensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairVecTensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairVecTensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _singa_wrap.new_PairVecTensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _singa_wrap.PairVecTensor_first_set
    __swig_getmethods__["first"] = _singa_wrap.PairVecTensor_first_get
    if _newclass:
        first = _swig_property(_singa_wrap.PairVecTensor_first_get, _singa_wrap.PairVecTensor_first_set)
    __swig_setmethods__["second"] = _singa_wrap.PairVecTensor_second_set
    __swig_getmethods__["second"] = _singa_wrap.PairVecTensor_second_get
    if _newclass:
        second = _swig_property(_singa_wrap.PairVecTensor_second_get, _singa_wrap.PairVecTensor_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _singa_wrap.delete_PairVecTensor
    __del__ = lambda self: None
PairVecTensor_swigregister = _singa_wrap.PairVecTensor_swigregister
PairVecTensor_swigregister(PairVecTensor)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _singa_wrap.new_Layer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Setup(self, arg2, arg3):
        return _singa_wrap.Layer_Setup(self, arg2, arg3)

    def SetupWithMultInputs(self, arg2, arg3):
        return _singa_wrap.Layer_SetupWithMultInputs(self, arg2, arg3)

    def param_values(self):
        return _singa_wrap.Layer_param_values(self)

    def GetOutputSampleShape(self):
        return _singa_wrap.Layer_GetOutputSampleShape(self)

    def GetOutputSampleShapeAt(self, k):
        return _singa_wrap.Layer_GetOutputSampleShapeAt(self, k)

    def ToDevice(self, device):
        return _singa_wrap.Layer_ToDevice(self, device)

    def AsType(self, dtype):
        return _singa_wrap.Layer_AsType(self, dtype)

    def Forward(self, flag, input):
        return _singa_wrap.Layer_Forward(self, flag, input)

    def ForwardWithMultInputs(self, flag, inputs):
        return _singa_wrap.Layer_ForwardWithMultInputs(self, flag, inputs)

    def Backward(self, flag, grad):
        return _singa_wrap.Layer_Backward(self, flag, grad)

    def BackwardWithMultInputs(self, flag, grads):
        return _singa_wrap.Layer_BackwardWithMultInputs(self, flag, grads)
    __swig_destroy__ = _singa_wrap.delete_Layer
    __del__ = lambda self: None
Layer_swigregister = _singa_wrap.Layer_swigregister
Layer_swigregister(Layer)


def CreateLayer(type):
    return _singa_wrap.CreateLayer(type)
CreateLayer = _singa_wrap.CreateLayer

def GetRegisteredLayers():
    return _singa_wrap.GetRegisteredLayers()
GetRegisteredLayers = _singa_wrap.GetRegisteredLayers
class RNN(Layer):
    __swig_setmethods__ = {}
    for _s in [Layer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RNN, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RNN, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _singa_wrap.new_RNN()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _singa_wrap.delete_RNN
    __del__ = lambda self: None
RNN_swigregister = _singa_wrap.RNN_swigregister
RNN_swigregister(RNN)

class CudnnRNN(RNN):
    __swig_setmethods__ = {}
    for _s in [RNN]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CudnnRNN, name, value)
    __swig_getmethods__ = {}
    for _s in [RNN]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CudnnRNN, name)
    __repr__ = _swig_repr

    def ForwardWithMultInputs(self, flag, inputs):
        return _singa_wrap.CudnnRNN_ForwardWithMultInputs(self, flag, inputs)

    def BackwardWithMultInputs(self, flag, grads):
        return _singa_wrap.CudnnRNN_BackwardWithMultInputs(self, flag, grads)

    def ToDevice(self, device):
        return _singa_wrap.CudnnRNN_ToDevice(self, device)

    def param_values(self):
        return _singa_wrap.CudnnRNN_param_values(self)

    def GetOutputSampleShape(self):
        return _singa_wrap.CudnnRNN_GetOutputSampleShape(self)

    def __init__(self):
        this = _singa_wrap.new_CudnnRNN()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _singa_wrap.delete_CudnnRNN
    __del__ = lambda self: None
CudnnRNN_swigregister = _singa_wrap.CudnnRNN_swigregister
CudnnRNN_swigregister(CudnnRNN)

class Optimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optimizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _singa_wrap.delete_Optimizer
    __del__ = lambda self: None

    def Setup(self, str):
        return _singa_wrap.Optimizer_Setup(self, str)

    def Apply(self, epoch, lr, name, grad, value, step=-1):
        return _singa_wrap.Optimizer_Apply(self, epoch, lr, name, grad, value, step)
Optimizer_swigregister = _singa_wrap.Optimizer_swigregister
Optimizer_swigregister(Optimizer)


def CreateOptimizer(type):
    return _singa_wrap.CreateOptimizer(type)
CreateOptimizer = _singa_wrap.CreateOptimizer
class Constraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _singa_wrap.new_Constraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Setup(self, conf_str):
        return _singa_wrap.Constraint_Setup(self, conf_str)

    def Apply(self, epoch, value, grad, step=-1):
        return _singa_wrap.Constraint_Apply(self, epoch, value, grad, step)
    __swig_destroy__ = _singa_wrap.delete_Constraint
    __del__ = lambda self: None
Constraint_swigregister = _singa_wrap.Constraint_swigregister
Constraint_swigregister(Constraint)


def CreateConstraint(type):
    return _singa_wrap.CreateConstraint(type)
CreateConstraint = _singa_wrap.CreateConstraint
class Regularizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Regularizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Regularizer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _singa_wrap.new_Regularizer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Setup(self, conf_str):
        return _singa_wrap.Regularizer_Setup(self, conf_str)

    def Apply(self, epoch, value, grad, step=-1):
        return _singa_wrap.Regularizer_Apply(self, epoch, value, grad, step)
    __swig_destroy__ = _singa_wrap.delete_Regularizer
    __del__ = lambda self: None
Regularizer_swigregister = _singa_wrap.Regularizer_swigregister
Regularizer_swigregister(Regularizer)


def CreateRegularizer(type):
    return _singa_wrap.CreateRegularizer(type)
CreateRegularizer = _singa_wrap.CreateRegularizer
class Loss(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Loss, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Loss, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _singa_wrap.delete_Loss
    __del__ = lambda self: None

    def Forward(self, flag, prediction, target):
        return _singa_wrap.Loss_Forward(self, flag, prediction, target)

    def Evaluate(self, flag, prediction, target):
        return _singa_wrap.Loss_Evaluate(self, flag, prediction, target)

    def Backward(self):
        return _singa_wrap.Loss_Backward(self)
Loss_swigregister = _singa_wrap.Loss_swigregister
Loss_swigregister(Loss)

class MSE(Loss):
    __swig_setmethods__ = {}
    for _s in [Loss]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSE, name, value)
    __swig_getmethods__ = {}
    for _s in [Loss]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MSE, name)
    __repr__ = _swig_repr

    def Forward(self, flag, prediction, target):
        return _singa_wrap.MSE_Forward(self, flag, prediction, target)

    def Backward(self):
        return _singa_wrap.MSE_Backward(self)

    def __init__(self):
        this = _singa_wrap.new_MSE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _singa_wrap.delete_MSE
    __del__ = lambda self: None
MSE_swigregister = _singa_wrap.MSE_swigregister
MSE_swigregister(MSE)

class SoftmaxCrossEntropy(Loss):
    __swig_setmethods__ = {}
    for _s in [Loss]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftmaxCrossEntropy, name, value)
    __swig_getmethods__ = {}
    for _s in [Loss]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoftmaxCrossEntropy, name)
    __repr__ = _swig_repr

    def Forward(self, flag, prediction, target):
        return _singa_wrap.SoftmaxCrossEntropy_Forward(self, flag, prediction, target)

    def Backward(self):
        return _singa_wrap.SoftmaxCrossEntropy_Backward(self)

    def __init__(self):
        this = _singa_wrap.new_SoftmaxCrossEntropy()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _singa_wrap.delete_SoftmaxCrossEntropy
    __del__ = lambda self: None
SoftmaxCrossEntropy_swigregister = _singa_wrap.SoftmaxCrossEntropy_swigregister
SoftmaxCrossEntropy_swigregister(SoftmaxCrossEntropy)

class Metric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Metric, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _singa_wrap.delete_Metric
    __del__ = lambda self: None

    def Forward(self, prediction, target):
        return _singa_wrap.Metric_Forward(self, prediction, target)

    def Evaluate(self, prediction, target):
        return _singa_wrap.Metric_Evaluate(self, prediction, target)
Metric_swigregister = _singa_wrap.Metric_swigregister
Metric_swigregister(Metric)

class Accuracy(Metric):
    __swig_setmethods__ = {}
    for _s in [Metric]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Accuracy, name, value)
    __swig_getmethods__ = {}
    for _s in [Metric]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Accuracy, name)
    __repr__ = _swig_repr

    def Forward(self, prediction, target):
        return _singa_wrap.Accuracy_Forward(self, prediction, target)

    def __init__(self):
        this = _singa_wrap.new_Accuracy()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _singa_wrap.delete_Accuracy
    __del__ = lambda self: None
Accuracy_swigregister = _singa_wrap.Accuracy_swigregister
Accuracy_swigregister(Accuracy)

class PairStrTensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairStrTensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairStrTensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _singa_wrap.new_PairStrTensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _singa_wrap.PairStrTensor_first_set
    __swig_getmethods__["first"] = _singa_wrap.PairStrTensor_first_get
    if _newclass:
        first = _swig_property(_singa_wrap.PairStrTensor_first_get, _singa_wrap.PairStrTensor_first_set)
    __swig_setmethods__["second"] = _singa_wrap.PairStrTensor_second_set
    __swig_getmethods__["second"] = _singa_wrap.PairStrTensor_second_get
    if _newclass:
        second = _swig_property(_singa_wrap.PairStrTensor_second_get, _singa_wrap.PairStrTensor_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _singa_wrap.delete_PairStrTensor
    __del__ = lambda self: None
PairStrTensor_swigregister = _singa_wrap.PairStrTensor_swigregister
PairStrTensor_swigregister(PairStrTensor)

class VecPairStrTensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecPairStrTensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecPairStrTensor, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _singa_wrap.VecPairStrTensor_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _singa_wrap.VecPairStrTensor___nonzero__(self)

    def __bool__(self):
        return _singa_wrap.VecPairStrTensor___bool__(self)

    def __len__(self):
        return _singa_wrap.VecPairStrTensor___len__(self)

    def __getslice__(self, i, j):
        return _singa_wrap.VecPairStrTensor___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _singa_wrap.VecPairStrTensor___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _singa_wrap.VecPairStrTensor___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _singa_wrap.VecPairStrTensor___delitem__(self, *args)

    def __getitem__(self, *args):
        return _singa_wrap.VecPairStrTensor___getitem__(self, *args)

    def __setitem__(self, *args):
        return _singa_wrap.VecPairStrTensor___setitem__(self, *args)

    def pop(self):
        return _singa_wrap.VecPairStrTensor_pop(self)

    def append(self, x):
        return _singa_wrap.VecPairStrTensor_append(self, x)

    def empty(self):
        return _singa_wrap.VecPairStrTensor_empty(self)

    def size(self):
        return _singa_wrap.VecPairStrTensor_size(self)

    def swap(self, v):
        return _singa_wrap.VecPairStrTensor_swap(self, v)

    def begin(self):
        return _singa_wrap.VecPairStrTensor_begin(self)

    def end(self):
        return _singa_wrap.VecPairStrTensor_end(self)

    def rbegin(self):
        return _singa_wrap.VecPairStrTensor_rbegin(self)

    def rend(self):
        return _singa_wrap.VecPairStrTensor_rend(self)

    def clear(self):
        return _singa_wrap.VecPairStrTensor_clear(self)

    def get_allocator(self):
        return _singa_wrap.VecPairStrTensor_get_allocator(self)

    def pop_back(self):
        return _singa_wrap.VecPairStrTensor_pop_back(self)

    def erase(self, *args):
        return _singa_wrap.VecPairStrTensor_erase(self, *args)

    def __init__(self, *args):
        this = _singa_wrap.new_VecPairStrTensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _singa_wrap.VecPairStrTensor_push_back(self, x)

    def front(self):
        return _singa_wrap.VecPairStrTensor_front(self)

    def back(self):
        return _singa_wrap.VecPairStrTensor_back(self)

    def assign(self, n, x):
        return _singa_wrap.VecPairStrTensor_assign(self, n, x)

    def resize(self, *args):
        return _singa_wrap.VecPairStrTensor_resize(self, *args)

    def insert(self, *args):
        return _singa_wrap.VecPairStrTensor_insert(self, *args)

    def reserve(self, n):
        return _singa_wrap.VecPairStrTensor_reserve(self, n)

    def capacity(self):
        return _singa_wrap.VecPairStrTensor_capacity(self)
    __swig_destroy__ = _singa_wrap.delete_VecPairStrTensor
    __del__ = lambda self: None
VecPairStrTensor_swigregister = _singa_wrap.VecPairStrTensor_swigregister
VecPairStrTensor_swigregister(VecPairStrTensor)

class Snapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Snapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Snapshot, name)
    __repr__ = _swig_repr
    kRead = _singa_wrap.Snapshot_kRead
    kWrite = _singa_wrap.Snapshot_kWrite

    def __init__(self, prefix, mode, max_param_size=10):
        this = _singa_wrap.new_Snapshot(prefix, mode, max_param_size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _singa_wrap.delete_Snapshot
    __del__ = lambda self: None

    def Read(self):
        return _singa_wrap.Snapshot_Read(self)

    def Write(self, key, param):
        return _singa_wrap.Snapshot_Write(self, key, param)
Snapshot_swigregister = _singa_wrap.Snapshot_swigregister
Snapshot_swigregister(Snapshot)

# This file is compatible with both classic and new-style classes.


